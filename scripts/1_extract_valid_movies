# SQL

# Extract valid movies: movies
#						not Documentary
#						not Short
#						released in 2007 - 2017
#						country USA

sqlite3

.open imdb.db
.headers on

DROP TABLE IF EXISTS movies_sql;
CREATE TEMP TABLE movies_sql AS
SELECT title.id, title.title, title.production_year as year
FROM title
WHERE title.kind_id = 1
AND title.production_year >= 2007
AND title.production_year <= 2017
AND title.id IN (SELECT movie_id FROM movie_info WHERE info_type_id = 8 AND info = 'USA')
AND title.id NOT IN (SELECT DISTINCT movie_id FROM movie_info WHERE info_type_id = 3 AND (info = 'Documentary' OR info = 'Short'));
## Count: 34634


# Output the valid movies with runtime infomation
.mode csv
.output movies_sql.csv

SELECT movies_sql.*, movie_info.info AS runtimeMinutes
FROM movies_sql
LEFT JOIN movie_info ON movies_sql.id = movie_info.movie_id
AND movie_info.info_type_id = 1;
## Count: 36753


# PYTHON

# Standardize the runtime information

ipython3

import numpy as np
import pandas as pd

movies_sql = pd.read_csv('movies_sql.csv')
movies_sql['runtimeMinutes'] = movies_sql['runtimeMinutes'].str.extract(':?(\d+)', expand=False)
movies_sql = movies_sql.drop_duplicates()
movies_sql['runtimeMinutes'] = movies_sql['runtimeMinutes'].fillna(0)
movies_sql['runtimeMinutes'] = movies_sql['runtimeMinutes'].astype(int)
## Count: 36321


# Extract valid movies: movies
#						not Short
#						released in 2007 - 2017

titles = pd.read_csv('title.basics.tsv', sep='\t')
movies = titles.loc[(titles['titleType'] == 'movie')]
movies.replace('\\N', np.nan, inplace=True)
movies['startYear'] = movies['startYear'].fillna(0)
movies['startYear'] = movies['startYear'].astype(int)
movies['runtimeMinutes'] = movies['runtimeMinutes'].fillna(0)
movies['runtimeMinutes'] = movies['runtimeMinutes'].astype(int)
movies_2006_2018 = movies.loc[(movies['startYear'] >= 2007) & (movies['startYear'] <= 2017)]
movies_2006_2018[['tconst', 'primaryTitle', 'originalTitle', 'startYear', 'runtimeMinutes']].to_csv('movies_s3.csv', index=False)
## Count: 148902


# Merge movies_s3 and movies_sql

movies_s3 = pd.read_csv('movies_s3.csv')
valid_movies = pd.merge(movies_s3, movies_sql,  how='inner', left_on=['originalTitle','startYear', 'runtimeMinutes'], right_on = ['title', 'year', 'runtimeMinutes'])
valid_movies = valid_movies.drop_duplicates()
## Count: 33679

first_match = valid_movies.groupby(['tconst']).first().reset_index()
first_match = first_match.groupby(['id']).first().reset_index()
second_match = valid_movies.groupby(['tconst']).last().reset_index()
second_match = second_match.groupby(['id']).last().reset_index()

result = pd.concat([first_match, second_match], axis = 0)
result = result.drop_duplicates()

# Check match
#group_by_id = result.groupby('id').count()  
#group_by_id[group_by_id['year'] > 1]

#group_by_tconst = result.groupby('tconst').count()
#group_by_tconst[group_by_tconst['year'] > 1]

# Delete id = 3447840, 3843748, 4363957, 3453444, 3697149
result = result[result.id != 3447840]
result = result[result.id != 3843748]
result = result[result.id != 4363957]
result = result[result.id != 3453444]
result = result[result.id != 3697149]
## Count: 33613

result[['tconst', 'id', 'primaryTitle', 'originalTitle', 'year', 'runtimeMinutes']].to_csv('valid_movies.csv', index=False)
